<?if(!DEFINED('BASEPATH')) exit('No direct script access allowed');include_once APPPATH."libraries/core/objcontroller.php";class Emptopositions extends Objcontroller {	public function __construct()	{		parent::__construct();		$this->lang->load('emptopositions');		$this->load->model('emptopositions_model');		$this->load->helper('employeers');		$this->load->helper('positions');	}		public function _remap($m_Name)	{		switch($m_Name) 		{			case 'create': $this->create();break;			case 'edit': $this->edit();break;			case 'details': $this->details();break;			case 'remove': $this->remove();break;			case 'move': $this->move();break;			case 'sort': $this->sort();break;			default: $this->index();		}	}	public function journal()	{		$data = array();		$data['title'] = lang('EMPTOPOSITIONS_TITLE');		$data['orid'] = $this->get_orid();		$data['sort'] = $this->get_session('sort');		$data['find'] = $this->find();		$data['fields']['rid'] = array('label' => 'ID', 'colwidth' => '5%', 'sort' => TRUE); 		$data['fields']['date_obj'] = array('label' => lang('DATE_OBJ'), 'colwidth' => '10%', 'sort' => TRUE);		$data['fields']['employeer_name'] =  array('label' => lang('EMPLOYEER'), 'colwidth' => '20%', 'sort' => TRUE);		$data['fields']['filial_name'] = array('label' => lang('FILIAL'), 'colwidth' => '15%', 'sort' => TRUE);		$data['fields']['position_name'] = array('label' => lang('POSITION'), 'colwidth' => '20%', 'sort' => TRUE); 		$data['fields']['bdate'] =  array('label' => lang('BDATE'), 'colwidth' => '10%', 'sort' => TRUE);		$data['fields']['archive'] = array('label' => lang('ARCHIVE'), 'colwidth' => '5%', 'sort' => TRUE, 'type' => 'yes_no'); 		$data['fields']['modifyDT'] = array('label' => lang('MODIFYDT'), 'colwidth' => '15%', 'sort' => TRUE); 		$data['tools'] = $this->get_tools(); 		$data['ds'] = $this->emptopositions_model->get_ds();		$data['paging'] = $this->get_paging($this->emptopositions_model->get_calc_rows());		return $this->load->view('standart/grid', $data, TRUE);			}	private function create()	{		$data = array();		$this->set_validation();		$data['title'] = lang('EMPTOPOSITIONS_TITLE_CREATE');		$data['orid'] = $this->get_orid();		$data['success'] = null;				if($this->form_validation->run() === TRUE)		{			if(($rid = $this->emptopositions_model->create_record()))			{				$this->session->set_flashdata('success', TRUE);				redirect(get_currcontroller()."/edit/$rid", 'refresh');				return;			}			else $data['success'] = false;		}				$data['content'] = $this->load->view('emptopositions/create', $data, TRUE);		return $this->load->view('layouts/main_layout', $data);	}	private function edit()	{		$rid = (int)$this->uri->segment(3);				if(!$rid) show_404();				$data = array();		$this->set_validation();		$data['title'] = lang('EMPTOPOSITIONS_TITLE_EDIT');		$data['rid'] = $rid;		$data['orid'] = $this->get_orid();		$data['ds'] = $this->emptopositions_model->get_edit($rid);		$data['success'] = $this->session->flashdata('success') ? $this->session->flashdata('success') : null;				if(!$data['ds']) show_404(); 		if($this->form_validation->run() === TRUE)		{			if($this->emptopositions_model->update_record()) $data['success'] = TRUE;			else $data['success'] = false;						$data['ds'] = $this->emptopositions_model->get_edit($rid);		}				$data['content'] = $this->load->view('emptopositions/edit', $data, TRUE);		return $this->load->view('layouts/main_layout', $data);	}	private function details()	{		$rid = (int)$this->uri->segment(3);				if(!$rid) show_404();				$data = array();		$data['title'] = lang('EMPTOPOSITIONS_TITLE_DETAILS');		$data['rid'] = $rid;		$data['orid'] = $this->get_orid();		$data['ds'] = $this->emptopositions_model->get_edit($rid);				if(!$data['ds']) show_404(); 				$data['content'] = $this->load->view('emptopositions/details', $data, TRUE);		return $this->load->view('layouts/main_layout', $data);	}	private function find()	{		$data['orid'] = $this->get_orid();		$this->form_validation->set_rules('rid', 'ID', 'trim');		$this->form_validation->set_rules('doc_from', lang('DOC_FROM'), 'trim');		$this->form_validation->set_rules('doc_to', lang('DOC_TO'), 'trim');		$this->form_validation->set_rules('emp_bdate', lang('DOC_FROM'), 'trim');		$this->form_validation->set_rules('emp_edate', lang('DOC_TO'), 'trim');		$this->form_validation->set_rules('_filials_rid', lang('FILIAL'), 'trim');		$this->form_validation->set_rules('_employeers_rid', lang('EMPLOYEER'), 'trim');						if($this->form_validation->run() == TRUE)		{			$search_rule = array();						if($this->input->post('rid')) $search_rule['where']['_objects.rid'] = $this->input->post('rid');			if($this->input->post('doc_from')) $search_rule['where']['_emp_to_positions_headers.date_doc >='] = date('Y-m-d', strtotime($this->input->post('doc_from')));			if($this->input->post('doc_to')) $search_rule['where']['_emp_to_positions_headers.date_doc <='] = date('Y-m-d', strtotime($this->input->post('doc_to')));			if($this->input->post('_filials_rid')) $search_rule['where']['_emp_to_positions_rows._filials_rid'] = $this->input->post('_filials_rid');			if($this->input->post('_employeers_rid')) $search_rule['where']['_emp_to_positions_rows._employeers_rid'] = $this->input->post('_employeers_rid');						$this->set_searchrule($search_rule);		}				$search = $this->get_session('searchrule');		$data['search'] = array_merge(element('like', $search, array()), element('where', $search, array()));		return $this->load->view('emptopositions/find', $data, TRUE);	}	private function move()	{		$rid = (int)$this->uri->segment(3);				if(!$rid) show_404();				$data = array();		$this->form_validation->set_rules('_employeers_rid', lang('NEW_OWNER'), 'required');		$data['title'] = lang('EMPTOPOSITIONS_TITLE_MOVE');		$data['rid'] = $rid;		$data['orid'] = $this->get_orid();		$data['ds'] = $this->emptopositions_model->get_edit($rid);		$data['success'] = $this->session->flashdata('success') ? $this->session->flashdata('success') : null;				if(!$data['ds']) show_404(); 		if($this->form_validation->run() === TRUE)		{			if($this->emptopositions_model->move_record()) $data['success'] = TRUE;			else $data['success'] = false;						$data['ds'] = $this->emptopositions_model->get_edit($rid);		}				$data['content'] = $this->load->view('emptopositions/move', $data, TRUE);		return $this->load->view('layouts/main_layout', $data);	}		private function set_validation()	{		$this->form_validation->set_rules('date_obj', lang('DATE_OBJ'), 'required');		$this->form_validation->set_rules('bdate', lang('BDATE'), 'required');		$this->form_validation->set_rules('_employeers_rid', lang('EMPLOYEER'), 'required');		$this->form_validation->set_rules('_filials_rid', lang('FILIAL'), 'required');		$this->form_validation->set_rules('_positions_rid', lang('POSITION'), 'required');		$this->form_validation->set_rules('descr', lang('DESCR'), 'trim|max_length[512]');		$this->form_validation->set_rules('archive', lang('ARCHIVE'), 'trim');		return;			}}